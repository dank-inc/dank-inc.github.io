{"version":3,"sources":["reportWebVitals.ts","index.tsx","App.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","ref","useRef","useState","status","setStatus","pop","setPop","useEffect","setTimeout","el","current","codeMirror","codemirror","lineNumbers","mode","on","e","v","focus","handleShortcut","key","eval","getValue","err","console","error","saveHandler","ctrlKey","metaKey","includes","preventDefault","addEventListener","child","firstChild","removeChild","removeEventListener","className"],"mappings":"kLAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAO1Bd,K,0uCCXMY,IAAM,SAANA,MACJ,IAAMG,IAAMC,kDAA8B,MAD1B,UAEYC,oDAAS,IAFrB,iLAETC,OAFS,cAEDC,UAFC,yBAGMF,qDAAS,GAHf,kLAGTG,IAHS,cAGJC,OAHI,cAiEhB,OA3DAC,sDAAU,WACHF,KACLG,YAAW,WACTF,QAAO,KACN,QACF,CAACD,MAEJE,sDAAU,WACR,GAAKP,IAAL,CAEA,IAAMS,GAAKT,IAAIU,QAETC,WAAaC,kDAAWH,GAAI,CAChCI,aAAa,EACbC,KAAM,eAGRH,WAAWI,GAAG,UAAU,SAAUC,EAAGC,OAKrCN,WAAWO,QAEX,IAAMC,eAAiB,SAAjBA,eAAkBC,KAKtB,GAJY,MAARA,MACFhB,UAAU,UACVE,QAAO,IAEG,UAARc,IACF,IACEC,KAAKV,WAAWW,YAChB,MAAOC,KACPnB,UAAU,oBACVE,QAAO,GACPkB,QAAQC,MAAMF,OAKdG,YAAc,SAACV,GACnB,GAAKA,EAAEW,SAAWX,EAAEY,QAAU,CAC5B,IAAK,CAAC,IAAK,SAASC,SAASb,EAAEI,KAAM,OAGrC,OAFAD,eAAeH,EAAEI,KACjBJ,EAAEc,kBACK,IAMX,OAFAhC,SAASiC,iBAAiB,UAAWL,aAE9B,WACL,IAAMM,EAAQvB,GAAGwB,WACbD,GAAOvB,GAAGyB,YAAYF,GAC1BlC,SAASqC,oBAAoB,UAAWT,iBAGzC,CAAC1B,MAGF,mEAAKoC,UAAU,MAAf,UACE,kEAAKA,UAAU,SAAf,SACE,mEAAKA,UAAU,UAAf,UACE,uGACA,mGAGJ,kEAAKA,UAAU,WAAWpC,IAAKA,MAC/B,kEAAKoC,UAAU,SAAf,SAEE,gEAAGA,UAAS,iBAAY/B,IAAM,MAAQ,IAAtC,SAA6CF,eAMtCN,4B","file":"static/js/main.245f386a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/* eslint no-eval: 0 */\nimport { useEffect, useRef, useState } from 'react';\nimport codemirror from 'codemirror'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/lib/codemirror.css'\n\nconst App = () => {\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [status, setStatus] = useState('')\n  const [pop, setPop] = useState(false)\n\n\n  useEffect(() => {\n    if (!pop) return\n    setTimeout(() => {\n      setPop(false)\n    }, 1150)\n  }, [pop])\n\n  useEffect(() => {\n    if (!ref) return\n\n    const el = ref.current as HTMLElement\n\n    const codeMirror = codemirror(el, {\n      lineNumbers: true,\n      mode: 'javascript',\n    })\n\n    codeMirror.on('change', function (e, v) {\n      // console.log(e, v)\n    })\n\n\n    codeMirror.focus()\n\n    const handleShortcut = (key: string) => {\n      if (key === 's') {\n        setStatus(\"Saved!\")\n        setPop(true)\n      }\n      if (key === 'Enter') {\n        try {\n          eval(codeMirror.getValue())\n        } catch (err) {\n          setStatus(\"Code is invalid!\")\n          setPop(true)\n          console.error(err)\n        }\n      }\n    }\n\n    const saveHandler = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey)) {\n        if (!['s', 'Enter'].includes(e.key)) return\n        handleShortcut(e.key)\n        e.preventDefault()\n        return false\n      }\n    }\n\n    document.addEventListener('keydown', saveHandler)\n\n    return () => {\n      const child = el.firstChild\n      if (child) el.removeChild(child)\n      document.removeEventListener('keydown', saveHandler)\n    }\n\n  }, [ref])\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <div className=\"top-mid\">\n          <h1>ðŸ§© Nerdpuzzles</h1>\n          <p>write some code!</p>\n        </div>\n      </div>\n      <div className=\"code-box\" ref={ref}></div>\n      <div className=\"footer\">\n        {/* <button>Run Code!</button> */}\n        <p className={`status ${pop ? 'pop' : ''}`}>{status}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}